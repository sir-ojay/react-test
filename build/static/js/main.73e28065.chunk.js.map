{"version":3,"sources":["../node_modules/h8k-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","Components/ResidentsList.js","Components/Search.js","Components/Error.js","App.js","registerServiceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","ResidentsList","className","data-testid","key","Search","htmlFor","type","App","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","applyPolyfills","defineCustomElements"],"mappings":"0LAAA,IAAIA,EAAM,CACT,wBAAyB,CACxB,GACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,GACzBG,EAAOC,QAAUf,G,oFCRFgB,MAdf,WACC,OACC,yBAAKC,UAAU,oBACd,yBAAKA,UAAU,gCAAf,kBACA,wBAAIA,UAAU,4BAA4BC,cAAY,qBACrD,wBAAIC,IAAI,QAAQF,UAAU,oBAA1B,W,KCyBWG,MAlBf,WACC,OACC,yBAAKH,UAAU,wDACd,2BAAOI,QAAQ,eAAf,gBACC,6BACC,2BAAOV,GAAG,cAAcO,cAAY,cAAcI,KAAK,OAAOL,UAAU,kBAG1E,2BAAOI,QAAQ,eAAf,gBACC,6BACC,2BAAOV,GAAG,cAAcO,cAAY,cAAcI,KAAK,OAAOL,UAAU,kBAG1E,4BAAQK,KAAK,SAASJ,cAAY,SAASD,UAAU,cAArD,SCrBYT,MAJf,WACC,OAAO,yBAAKU,cAAY,WAAWD,UAAU,sCAAtC,kB,MCkBOM,MAbf,WACE,OACE,yBAAKN,UAAU,OACX,gCAAYO,OAJN,WAKR,yBAAKP,UAAU,wEACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCLFQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT1B,MAAK,SAAA8B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,WCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACH1B,MAAK,SAAAkD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMvD,MAAK,SAAA8B,GACjCA,EAAa0B,aAAaxD,MAAK,WAC7BqB,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMvD,MAAK,WACjCqC,QAAQC,IACN,gHAMJb,EAAgBC,OCxCxBiC,GACAC,cACK5D,MAAK,WACF,OAAO6D,YAAqBxC,a","file":"static/js/main.73e28065.chunk.js","sourcesContent":["var map = {\n\t\"./h8k-logo_2.entry.js\": [\n\t\t18,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 13;\nmodule.exports = webpackAsyncContext;","import React from 'react';\r\n\r\nfunction ResidentsList() {\r\n\treturn (\r\n\t\t<div className=\"pa-10 mt-10 w-75\">\r\n\t\t\t<div className=\"font-weight-bold text-center\">Residents List</div>\r\n\t\t\t<ul className=\"mt-10 styled w-50 mx-auto\" data-testid=\"residentsNameList\">\r\n\t\t\t\t<li key=\"item1\" className=\"slide-up-fade-in\">\r\n\t\t\t\t\tJohn\r\n\t\t\t\t\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ResidentsList;\r\n","import React from 'react';\r\n\r\n// `joiningDate` && `validityDate` format \"yyyy-mm-dd\"\r\n\r\nfunction checkValidity(joiningDate, validityDate) {\r\n\tconst now = new Date();\r\n\tconst today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n\tconst [year, month, day] = joiningDate.split('-');\r\n\tconst [yyyy, mm, dd] = validityDate.split('-');\r\n\tconst maxValid = new Date(yyyy, mm - 1, dd);\r\n\tconst selected = new Date(year, month - 1, day);\r\n\treturn (maxValid >= selected) && (maxValid >= today);\r\n}\r\n\r\nfunction Search() {\r\n\treturn (\r\n\t\t<div className=\"my-50 layout-row align-items-end justify-content-end\">\r\n\t\t\t<label htmlFor=\"studentName\">Student Name:\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input id=\"studentName\" data-testid=\"studentName\" type=\"text\" className=\"mr-30 mt-10\"/>\r\n\t\t\t\t</div>\r\n\t\t\t</label>\r\n\t\t\t<label htmlFor=\"joiningDate\">Joining Date:\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input id=\"joiningDate\" data-testid=\"joiningDate\" type=\"date\" className=\"mr-30 mt-10\"/>\r\n\t\t\t\t</div>\r\n\t\t\t</label>\r\n\t\t\t<button type=\"button\" data-testid=\"addBtn\" className=\"small mb-0\">Add</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nfunction Error() {\r\n\treturn <div data-testid=\"errorMsg\" className=\"alert error mt-20 slide-up-fade-in\">Error Message</div>\r\n}\r\n// \r\nexport default Error;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ResidentsList from './Components/ResidentsList';\r\nimport Search from './Components/Search';\r\nimport Error from './Components/Error';\r\nimport 'h8k-components';\r\n\r\nconst title = \"Tizeti\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <h8k-navbar header={title} ></h8k-navbar>\r\n      <div className=\"layout-column justify-content-center align-items-center w-50 mx-auto\">\r\n        <Search />\r\n        <Error/>\r\n        <ResidentsList/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {applyPolyfills, defineCustomElements} from 'h8k-components/loader';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\napplyPolyfills()\r\n    .then(() => {\r\n        return defineCustomElements(window);\r\n    })\r\n"],"sourceRoot":""}